---
title: "506Assignment2"
author: "Jiaqi Sun"
format: 
  html:
    embed-resources: true
editor: visual
---

Github repository: [Github](https://github.com/AlanGalaxy/506A2)

.do file for Problem 3 is also available on github.

## Problem 1

(a1)

```{r}
#' Implement the die rolls using a loop
#'
#' @param num_dice: the number of dices to roll
#'
#' @return: the total winnings or loses
#'
#' @examples: > roll_loop(6)
#'            [1] 0
roll_loop <- function(num_dice) {
  balance <- num_dice * (-2)
  
  for (i in 1:num_dice) {
    dice <- sample(1:6, 1)
    # print(dice)
    if (dice %in% c(2, 4, 6)) {
      balance <- balance + dice
    }
  }
  
  return(balance)
}

set.seed(2)
roll_loop(6)
```

(a2)

```{r}
#' Implement the die rolls using built-in vectorized functions
#'
#' @param num_dice: the number of dices to roll
#'
#' @return: the total winnings or loses
#'
#' @examples: > roll_vectorized(6)
#'            [1] 0
roll_vectorized <- function(num_dice) {
   # This time we need sampling with replacement.
  dices <- sample(1:6, num_dice, replace = TRUE)
  # print(dices)
  results <- ifelse(dices %in% c(2, 4, 6), yes = dices - 2, no = -2)
  balance <- sum(results)
  
  return(balance)
}

set.seed(2)
roll_vectorized(6)

```

(a3)

```{r}
#' Implement the die rolls using table() function
#'
#' @param num_dice: the number of dices to roll
#'
#' @return: the total winnings or loses
#'
#' @examples: > roll_table(6)
#'            [1] 0
roll_table <- function(num_dice) {
  dices <- sample(1:6, num_dice, replace = TRUE)
  # print(dices)
  result_table <- table(factor(dices, levels = 1:6))
  balance <- sum(result_table[c(2, 4, 6)] * c(2, 4, 6)) - num_dice * 2
  
  return(balance)
}

set.seed(2)
roll_table(6)
```

(a4)

```{r}
#' Implement the die rolls using one apply function
#'
#' @param num_dice: the number of dices to roll
#'
#' @return: the total winnings or loses
#'
#' @examples: > roll_apply(6)
#'            [1] 0
roll_apply <- function(num_dice) {
  dices <- sample(1:6, num_dice, replace = TRUE)
  # print(dices)
  #' Calculate the balance of each dice
  #'
  #' @param dice: the number on each dice
  #'
  #' @return the winning or lose of each dice
  #'
  #' @examples: > calculate_balance(4)
  #'            [1] 2
  calculate_balance <- function(dice) {
    if (dice %in% c(2, 4, 6)) {
      return(dice - 2)
    } else {
      return(-2)
    }
  }
  
  each_dice_balance <- sapply(dices, calculate_balance)
  balance <-sum(each_dice_balance)
  
  return(balance)
}

set.seed(2)
roll_apply(6)
```

\(b\)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
roll_loop(3)
roll_loop(3000)

roll_vectorized(3)
roll_vectorized(3000)

roll_table(3)
roll_table(3000)

roll_apply(3)
roll_apply(3000)
```

The four functions work well.

\(c\)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
set.seed(2)
roll_loop(3)
set.seed(2)
roll_vectorized(3)
set.seed(2)
roll_table(3)
set.seed(2)
roll_apply(3)

set.seed(2)
roll_loop(3000)
set.seed(2)
roll_vectorized(3000)
set.seed(2)
roll_table(3000)
set.seed(2)
roll_apply(3000)
```

The four functions generate the same results.

\(d\)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(microbenchmark)

low <- 100
large <- 10000

benchmarks <- microbenchmark(
  loop_low <- roll_loop(low),
  loop_large <- roll_loop(large),
  vectorized_low <- roll_vectorized(low),
  vectorized_large <- roll_vectorized(large),
  table_low <- roll_table(low),
  table_large <- roll_table(large),
  apply_low <- roll_apply(low),
  apply_large <- roll_apply(large)
)

print(benchmarks)
```

The function using vectorized function in R is the most efficient one. Loop function is the least efficient one.

Comparing each function with low and large inputs:

-   loop function is linear in input;

-   vectorized function is still the most efficient one, but the lead is not as big as before;

-   table function performs very well when the input is large;

-   apply function is linear in input.

\(e\)

It's a fair game. The expectation is 0.

```{r}
#' Monte Carlo simulation for the balance outcome
#'
#' @param num_simulations: number of simulations
#' @param num_dices: number of dices in each simulation
#'
#' @return the outcomes of each simulation
simulate <- function(num_simulations, num_dices) {
  results <- numeric(num_simulations)
  
  for (i in 1:num_simulations) {
    results[i] <- roll_vectorized(num_dices)
  }
  
  return(results)
}

num_simulations <- 10000
num_dices <- 10

simulation_results <- simulate(num_simulations, num_dices)

mean_result <- mean(simulation_results)
cat("The mean of results is:", mean_result)
```

The result from Monte Carlo simulation is close to $0$, which indicates that this is a fair game.

## Problem 2

\(a\)

Import the data and rename the columns.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
cars <- read.csv("D:/Code/R/cars.csv", header = TRUE)

names(cars) <- c("height", "length", "width", "driveline", "type", 
                 "hybrid", "num_gear", "transmission", "city_mpg", 
                 "fuel_type", "highway_mpg", "classification", "ID", 
                 "make", "model_year", "year", "horsepower", "torque")
```

\(b\)

Restrict the data to the cars whose fuel type is "Gasoline".

```{r}
cars <- cars[cars$fuel_type == "Gasoline", ]
```

\(c\)

Fit the model.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
cars$year <- as.factor(cars$year)

model <- lm(highway_mpg ~ horsepower + torque + length + width + height +
              year, data = cars)

summary(model)
```

The coefficient of horsepower is 0.0163556, with standard error 0.0022772. This means that the higher the horsepower is, the higher highway mpg will be. The t statistic is 7.182 with p-value 7.96e-13. This means that the coefficient of horsepower is significantly different from 0. The other parameters whose significant level are less than 0.05 is "torque" and "height".

\(d\)

Calculate the values for predictors.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Use median of year as value of year
cars$year <- as.numeric(as.character(cars$year))
year_value <- median(cars$year)
year_value <- factor(year_value, levels = c(2009, 2010, 2011, 2012))
cars$year <- as.factor(cars$year)
# Use median of length, width and height as value of length, width and height.
length_value <- median(cars$length)
width_value <- median(cars$width)
height_value <- median(cars$height)
# Use the lower quantile, median and upper quantile as the three values 
# for torque.
horsepower_values <- seq(100, 600, by = 50)
torque_values <- c(185, 263, 317)
```

Fit the model, calculate the predicted response data and plot the interaction plot.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
interaction_model <- lm(highway_mpg ~ horsepower * torque + length + 
                          width + height + year, data = cars)
summary(interaction_model)

interaction_data <- expand.grid(horsepower = horsepower_values, 
                                torque = torque_values, length = length_value,
                                width = width_value, height = height_value, 
                                year = year_value)

interaction_data$highway_mpg <- predict(interaction_model, 
                                        newdata = interaction_data)

interaction_plot <- interaction.plot(
  x.factor = interaction_data$horsepower, 
  trace.factor = interaction_data$torque,
  response = interaction_data$highway_mpg, 
  type = "l", 
  trace.label = "Torque", 
  xlab = "Horsepower", 
  ylab = "Highway mpg", 
  main = "Interaction Plot"
)
```

Choose the lower quantile, median and upper quantile as the three values for torque.

Choose the median of year as the year value.The three lines have crosses between them, so there is interaction between horsepower and torque.

\(e\)

Calculate $\beta$ manually.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Create X and Y matrix
X <- cbind(1, cars$horsepower, cars$torque, cars$length, cars$width,  
           cars$height, cars$year == 2010, cars$year == 2011, 
           cars$year == 2012, cars$horsepower * cars$torque)

Y <- cars$highway_mpg

beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
beta_hat
```

The output's order is parameters for horsepower, torque, length, width, height, year2010, year2011, year2012, horsepower\*torque. The results are the same as in (d)

## Problem 3

Import the data from csv file.

``` stata
. cd /Users/sunjiaqi/Downloads
C:\Users\sunjiaqi\Downloads

. import delimited using cars.csv
(encoding automatically selected: ISO-8859-1)
(18 vars, 5,076 obs)

. 
end of do-file
```

\(a\)

Rename the columns.

``` stata

. rename dimensionsheight height

. rename dimensionslength length

. rename dimensionswidth width

. rename engineinformationdriveline driveline

. rename engineinformationenginetype type

. rename engineinformationhybrid hybrid

. rename engineinformationnumberofforward gears

. rename engineinformationtransmission transmission

. rename fuelinformationcitympg city_mpg

. rename fuelinformationfueltype fuel_type

. rename fuelinformationhighwaympg highway_mpg

. rename identificationclassification classification

. rename identificationid ID

. rename identificationmake make

. rename identificationmodelyear model_year

. rename identificationyear year

. rename engineinformationenginestatistic horsepower

. rename v18 torque

. 
end of do-file
```

\(b\)

Keep the rows whose fuel type is Gasoline

``` stata
. keep if fuel_type == "Gasoline"
(485 observations deleted)

. 
end of do-file
```

\(c\)

Regression, the year is a level factor. The results are the same as in R.

``` stata
. regress highway_mpg c.horsepower c.torque c.height c.length c.width i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(8, 4582)      =    413.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0.0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0.4192
-------------+----------------------------------   Adj R-squared   =    0.4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.6024

------------------------------------------------------------------------------
 highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .02082
      torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.0464236
      height |   .0099079   .0011267     8.79   0.000      .007699    .0121168
      length |    .001729   .0008836     1.96   0.050    -3.36e-06    .0034613
       width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .0014388
             |
        year |
       2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .8729342
       2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.495808
       2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.638031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33.7093
------------------------------------------------------------------------------

. 
end of do-file
```

\(d\)

Regress on the interaction

``` stata
. regress highway_mpg c.horsepower##c.torque c.length c.width c.height i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(9, 4581)      =    480.07
       Model |  81105.8715         9  9011.76351   Prob > F        =    0.0000
    Residual |   85993.096     4,581  18.7716865   R-squared       =    0.4854
-------------+----------------------------------   Adj R-squared   =    0.4844
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.3326

-------------------------------------------------------------------------------
  highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
   horsepower |  -.0166633   .0025388    -6.56   0.000    -.0216406    -.011686
       torque |  -.0860593   .0025333   -33.97   0.000    -.0910257   -.0810928
              |
 c.horsepower#|
     c.torque |   .0001124   4.63e-06    24.28   0.000     .0001033    .0001214
              |
       length |   .0017767   .0008318     2.14   0.033     .0001459    .0034075
        width |  -.0011694   .0008521    -1.37   0.170      -.00284    .0005011
       height |   .0065604   .0010696     6.13   0.000     .0044634    .0086573
              |
         year |
        2010  |  -.5627858   .6371716    -0.88   0.377    -1.811949    .6863777
        2011  |   .0725356   .6361142     0.11   0.909    -1.174555    1.319626
        2012  |   1.197033   .6411085     1.87   0.062    -.0598488    2.453915
              |
        _cons |   42.18795   .7930274    53.20   0.000     40.63323    43.74266
-------------------------------------------------------------------------------

. 
end of do-file
```

Plot the interaction plot. Use median of year 2011 as the value of year. Use lower quantile, median and upper quantile as the values of torque. Use 100 150 200 ...... 600 as the values of horsepower. We obtain the same plot as in R.

``` stata
. margins, at(horsepower=(100(50)600) torque=(185 263 317) height=155 length=129 wid
> th=143 year=2011) plot(ytitle("Highway mpg") xtitle("Horsepower") title("Interacti
> on Plot"))

Adjusted predictions                                     Number of obs = 4,591
Model VCE: OLS

Expression: Linear prediction, predict()
1._at:  horsepower =  100
        torque     =  185
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
2._at:  horsepower =  100
        torque     =  263
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
3._at:  horsepower =  100
        torque     =  317
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
4._at:  horsepower =  150
        torque     =  185
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
5._at:  horsepower =  150
        torque     =  263
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
6._at:  horsepower =  150
        torque     =  317
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
7._at:  horsepower =  200
        torque     =  185
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
8._at:  horsepower =  200
        torque     =  263
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
9._at:  horsepower =  200
        torque     =  317
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
10._at: horsepower =  250
        torque     =  185
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
11._at: horsepower =  250
        torque     =  263
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
12._at: horsepower =  250
        torque     =  317
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
13._at: horsepower =  300
        torque     =  185
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
14._at: horsepower =  300
        torque     =  263
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
15._at: horsepower =  300
        torque     =  317
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
16._at: horsepower =  350
        torque     =  185
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
17._at: horsepower =  350
        torque     =  263
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
18._at: horsepower =  350
        torque     =  317
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
19._at: horsepower =  400
        torque     =  185
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
20._at: horsepower =  400
        torque     =  263
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
21._at: horsepower =  400
        torque     =  317
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
22._at: horsepower =  450
        torque     =  185
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
23._at: horsepower =  450
        torque     =  263
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
24._at: horsepower =  450
        torque     =  317
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
25._at: horsepower =  500
        torque     =  185
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
26._at: horsepower =  500
        torque     =  263
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
27._at: horsepower =  500
        torque     =  317
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
28._at: horsepower =  550
        torque     =  185
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
29._at: horsepower =  550
        torque     =  263
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
30._at: horsepower =  550
        torque     =  317
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
31._at: horsepower =  600
        torque     =  185
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
32._at: horsepower =  600
        torque     =  263
        length     =  129
        width      =  143
        height     =  155
        year       = 2011
33._at: horsepower =  600
        torque     =  317
        length     =  129
        width      =  143
        height     =  155
        year       = 2011

------------------------------------------------------------------------------
             |            Delta-method
             |     Margin   std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
         _at |
          1  |   27.83061   .2351856   118.33   0.000     27.36953    28.29169
          2  |   21.99437   .3647513    60.30   0.000     21.27928    22.70946
          3  |    17.9539   .4738445    37.89   0.000     17.02493    18.88286
          4  |   28.03675   .1503217   186.51   0.000     27.74204    28.33145
          5  |    22.6387   .2645193    85.58   0.000     22.12011    23.15728
          6  |   18.90158   .3708746    50.96   0.000     18.17449    19.62868
          7  |   28.24288   .1188619   237.61   0.000     28.00985    28.47591
          8  |   23.28302    .173139   134.48   0.000     22.94358    23.62246
          9  |   19.84927   .2712973    73.16   0.000      19.3174    20.38114
         10  |   28.44901   .1729363   164.51   0.000     28.10997    28.78805
         11  |   23.92734   .1142953   209.35   0.000     23.70327    24.15142
         12  |   20.79696   .1808072   115.02   0.000     20.44249    21.15143
         13  |   28.65515   .2644485   108.36   0.000      28.1367    29.17359
         14  |   24.57167   .1386701   177.20   0.000     24.29981    24.84353
         15  |   21.74465   .1217175   178.65   0.000     21.50602    21.98327
         16  |   28.86128   .3663418    78.78   0.000     28.14307    29.57948
         17  |   25.21599   .2201705   114.53   0.000     24.78435    25.64763
         18  |   22.69233   .1413289   160.56   0.000     22.41526    22.96941
         19  |   29.06741   .4719395    61.59   0.000     28.14218    29.99264
         20  |   25.86032   .3174908    81.45   0.000     25.23788    26.48275
         21  |   23.64002   .2194708   107.71   0.000     23.20975    24.07029
         22  |   29.27354    .579219    50.54   0.000       28.138    30.40909
         23  |   26.50464   .4197683    63.14   0.000     25.68169    27.32759
         24  |   24.58771    .315271    77.99   0.000     23.96963    25.20579
         25  |   29.47968   .6873934    42.89   0.000     28.13206     30.8273
         26  |   27.14897   .5241088    51.80   0.000     26.12146    28.17647
         27  |    25.5354   .4167242    61.28   0.000     24.71842    26.35238
         28  |   29.68581    .796098    37.29   0.000     28.12508    31.24655
         29  |   27.79329   .6294874    44.15   0.000     26.55919    29.02739
         30  |   26.48308   .5205354    50.88   0.000     25.46258    27.50358
         31  |   29.89194   .9051417    33.02   0.000     28.11743    31.66646
         32  |   28.43762    .735458    38.67   0.000     26.99576    29.87947
         33  |   27.43077   .6255318    43.85   0.000     26.20443    28.65712
------------------------------------------------------------------------------

Variables that uniquely identify margins: horsepower torque

. 
end of do-file
```

Save the image

``` stata
. graph export "/Users/sunjiaqi/Downloads/Graph.png", as(png) name("Graph")
file /Users/sunjiaqi/Downloads/Graph.png saved as PNG format

. 
end of do-file
```

![](images/Graph-2.png)

\(e\)

Create two matrices containing predictors $X$ and response $y$.

``` stata
. matrix X = J(4591, 10, .)

. matrix y = J(4591, 1, .)

. generate year2010 = 1 if year == 2010
(2,958 missing values generated)

. generate year2011 = 1 if year == 2011
(2,797 missing values generated)

. generate year2012 = 1 if year == 2012
(3,475 missing values generated)

. replace year2010 = 0 if missing(year2010)
(2,958 real changes made)

. replace year2011 = 0 if missing(year2011)
(2,797 real changes made)

. replace year2012 = 0 if missing(year2012)
(3,475 real changes made)

. 
end of do-file
```

Calculate the $\beta$.

```         
. forval i = 1/4591 {
  2.     matrix X[`i', 1] = horsepower[`i']
  3.         matrix X[`i', 2] = torque[`i']
  4.         matrix X[`i', 3] = horsepower[`i'] * torque[`i']
  5.         matrix X[`i', 4] = length[`i']
  6.         matrix X[`i', 5] = width[`i']
  7.         matrix X[`i', 6] = height[`i']
  8.         matrix X[`i', 7] = year2010[`i']
  9.         matrix X[`i', 8] = year2011[`i']
 10.         matrix X[`i', 9] = year2012[`i']
 11.         matrix X[`i', 10] = 1
 12.         matrix y[`i', 1] = highway_mpg[`i']
 13. }

. 
end of do-file
```

``` stata
. matrix b = inv(X' * X) * X' * y

. matrix list b

b[10,1]
             c1
 c1  -.01666332
 c2  -.08605927
 c3   .00011236
 c4   .00177672
 c5  -.00116945
 c6   .00656039
 c7  -.56278578
 c8   .07253564
 c9    1.197033
c10   42.187948

. 
end of do-file
```

The results are the same as in (d).
